package erogenousbeef.bigreactors.common;

import java.util.Arrays;

import net.minecraft.item.Item;
import net.minecraft.item.ItemStack;
import net.minecraft.util.MovingObjectPosition;
import net.minecraft.world.World;
import net.minecraftforge.common.MinecraftForge;
import net.minecraftforge.event.Event.Result;
import net.minecraftforge.event.ForgeSubscribe;
import net.minecraftforge.event.entity.player.FillBucketEvent;
import cpw.mods.fml.common.Mod;
import cpw.mods.fml.common.Mod.EventHandler;
import cpw.mods.fml.common.Mod.Instance;
import cpw.mods.fml.common.ModMetadata;
import cpw.mods.fml.common.SidedProxy;
import cpw.mods.fml.common.event.FMLInitializationEvent;
import cpw.mods.fml.common.event.FMLPostInitializationEvent;
import cpw.mods.fml.common.event.FMLPreInitializationEvent;
import cpw.mods.fml.common.event.FMLServerAboutToStartEvent;
import cpw.mods.fml.common.network.NetworkMod;
import cpw.mods.fml.common.network.NetworkMod.SidedPacketHandler;
import erogenousbeef.bigreactors.client.ClientPacketHandler;
import erogenousbeef.bigreactors.net.ConnectionHandler;
import erogenousbeef.bigreactors.net.ServerPacketHandler;
import erogenousbeef.core.multiblock.MultiblockEventHandler;


@Mod(modid = BigReactors.CHANNEL, name = BigReactors.NAME, version = BRConfig.VERSION, acceptedMinecraftVersions = "[1.6.4,)")
@NetworkMod(clientSideRequired = true, serverSideRequired = false, connectionHandler = ConnectionHandler.class, 
			clientPacketHandlerSpec = @SidedPacketHandler(channels = { BigReactors.CHANNEL }, packetHandler = ClientPacketHandler.class),
			serverPacketHandlerSpec = @SidedPacketHandler(channels = { BigReactors.CHANNEL }, packetHandler = ServerPacketHandler.class))
public class BRLoader {

	public static final String MOD_ID = "BigReactors";
	
	@Instance(MOD_ID)
	public static BRLoader instance;

	@SidedProxy(clientSide = "erogenousbeef.bigreactors.client.ClientProxy", serverSide = "erogenousbeef.bigreactors.common.CommonProxy")
	public static CommonProxy proxy;
	
	@Mod.Metadata(MOD_ID)
	public static ModMetadata metadata;
	
	private MultiblockEventHandler multiblockEventHandler;
	
	@EventHandler
	public void preInit(FMLPreInitializationEvent event)
	{
		BigReactors.registerOres(0, true);
		BigReactors.registerIngots(0);
		BigReactors.registerFuelRods(0, true);
		BigReactors.registerReactorPartBlocks(0, true);
		BigReactors.registerSmallMachines(0,  true);
		BigReactors.registerYelloriumFluids(0,  true);

		BigReactors.eventHandler = new BREventHandler();
		MinecraftForge.EVENT_BUS.register(BigReactors.eventHandler);
		
		proxy.preInit();
		
		metadata.modId = MOD_ID;
		metadata.name  = BigReactors.NAME;
		metadata.description = "Adds large, multiblock power generation machines.  Need power? Go Big.";
		metadata.url = "http://www.big-reactors.com";
		metadata.version = BRConfig.VERSION;
		metadata.authorList = Arrays.asList(new String[] { "ErogenousBeef" });
		metadata.autogenerated = false;
	}

	@EventHandler
	public void load(FMLInitializationEvent evt)
	{
		proxy.init();
		BigReactors.register(this);
	}
	
	@EventHandler
	public void postInit(FMLPostInitializationEvent evt) {
		proxy.postInit();
	}
	
	@EventHandler
	public void serverAboutToStart(FMLServerAboutToStartEvent evt) {
		multiblockEventHandler = new MultiblockEventHandler();
		MinecraftForge.EVENT_BUS.register(multiblockEventHandler);
	}
	
	// GAME EVENT HANDLERS
	// FORGE EVENT HANDLERS

	// Handle bucketing of reactor fluids
	@ForgeSubscribe
    public void onBucketFill(FillBucketEvent e)
    {
            if(e.current.itemID != Item.bucketEmpty.itemID)
            {
                    return;
            }
            ItemStack filledBucket = fillBucket(e.world, e.target);
            if(filledBucket != null)
            {
                    e.world.setBlockToAir(e.target.blockX, e.target.blockY, e.target.blockZ);
                    e.result = filledBucket;
                    e.setResult(Result.ALLOW);
            }
    }
    
    private ItemStack fillBucket(World world, MovingObjectPosition block)
    {
            int blockId = world.getBlockId(block.blockX, block.blockY, block.blockZ);
            if(blockId == BigReactors.fluidCyaniteStill.blockID) return new ItemStack(BigReactors.fluidCyaniteBucketItem);
            else if(blockId == BigReactors.fluidYelloriumStill.blockID) return new ItemStack(BigReactors.fluidYelloriumBucketItem);
            else return null;
    }
}
